using System;
using Newtonsoft.Json.Linq;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Web.UI.WebControls;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using System.Web.UI;
using System.Web;
using GLib;

namespace InschoolProject_ASP_AI_New_
{
    public partial class listesurveillants : System.Web.UI.Page
    {


        //This code creates a new SqlConnection object and assigns it to the con variable. The connection string
        SqlConnection con2 = new SqlConnection(ConfigurationManager.ConnectionStrings["Inschooldb"].ConnectionString);
        SqlDataReader dr2; //objet of dataReader
        SqlCommand cmd2 = new SqlCommand();

        protected void Page_Load(object sender, EventArgs e)
        {
            // Check if the page is being loaded for the first time
            if (!IsPostBack)
            {
                // Get the file path of the text file
                string filePath1 = Server.MapPath("init_gpt_surveillant.txt");

                // Check if the session variable has been set
                if (Session["New_Load"] == null)
                {
                    // Read the text file
                    string fileContent1 = File.ReadAllText(filePath1);

                    // Set the text of the textbox to the content of the text file
                    txt_message.Text = fileContent1;

                    // Set the session variable
                    Session["New_Load"] = "1";

                    btnPdf2.Visible = false;
                    ImageButton2.Visible = false;

                }
            }
            
        }

        public void btn3_Click(object sender, EventArgs e)
        {
            //  Response.Write("<script>alert('"+Session["New_Load"]+"')</script>");
            //and don't use the function TOP in the end of the query because it causing errors   english words
            //txt_vocal : contient text voice
            getc(txt_message.Text + " always Cast as int The field 'IdEtudiant ' from the Table 'Surveillant' if he is present in the query.please translate all french words to english words and the last  translate all the alias used in the query to english.And please translate all the alias used in the query to english and don't use the function TOP in the end of the query because it causing errors and please never use an ALIAS for the table 'Surveillant' and 'Etudiant'. Now please convert this Text to MSSQL query : '" + txt_vocal2.Text + "'");

            //   Session["QueryFinal"] = "" + txt1.Text;
            try
            {
                cmd2.Connection = con2;

                //Help to make Sql request 
                //txt1 contient la requete

                cmd2.CommandText = txt3.Text.Replace("AND CAST(IdEtudiant as int);", "").Replace("AND e.IdEtudiant LIKE '%%'", "");
                con2.Open();
                DataTable dt2 = new DataTable();
                //used to execute a database query and retrieve the resulting data as a read-only  
                dr2 = cmd2.ExecuteReader();
                // Loads the data from the DataReader into the DataTable.
                dt2.Load(dr2);
                con2.Close();
                GridView3.DataSource = dt2;
                // take data of dt and make in GridView1 and display
                //This line of code binds the data from the data source to the GridView control. This allows the data to be displayed in the GridView control.
                GridView3.DataBind();
                GridView3.AutoGenerateColumns = true;
                GridView3.AutoGenerateEditButton = true;
                GridView3.AutoGenerateDeleteButton = true;


                GridView3.EditIndex = -1;

                //   Autogenerateeditbutton
            }
            catch
            {
                //This statement sets the DataSource property of the GridView1 control to null. This means that the GridView1 control will no longer be bound to any data source and will not display any data.
                GridView3.DataSource = null;
                GridView3.DataBind();

                if (GridView3.Rows.Count != 0)
                {
                    lblerror.Text = GridView3.Rows.Count.ToString();

                }
                if (GridView3.Rows.Count == 0)
                {
                    lblerror.Text = cmd2.CommandText;
                  //  Console.Write(":::" + GridView3.Rows.Count.ToString());
                }
            }
        }



        public void getc(string message)
        {
            var apiKey = "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";
            var inputText = message;
            var apiUrl = "https://api.openai.com/v1/engines/text-davinci-003/completions";
            var request = WebRequest.Create(apiUrl);
            request.Method = "POST";
            request.Headers["Authorization"] = "Bearer " + apiKey;
            string requestBody = "{\"prompt\": \"" + inputText + "\",\"max_tokens\": 1500,\"temperature\": 0.5}";
            byte[] requestBodyBytes = Encoding.UTF8.GetBytes(requestBody);
            request.ContentType = "application/json";
            request.ContentLength = requestBodyBytes.Length;
            using (Stream requestStream = request.GetRequestStream())
            {
                requestStream.Write(requestBodyBytes, 0, requestBodyBytes.Length);
            }
            try
            {
                using (WebResponse response = request.GetResponse())
                {
                    using (Stream responseStream = response.GetResponseStream())
                    {
                        using (StreamReader reader = new StreamReader(responseStream))
                        {
                            string responseJson = reader.ReadToEnd();
                            JObject responseData = JObject.Parse(responseJson);
                            string generatedText = (string)responseData["choices"][0]["text"];
                            txt3.Text = generatedText;
                        }
                    }
                }
            }
            catch (WebException ex)
            {
                using (Stream responseStream = ex.Response.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        string errorJson = reader.ReadToEnd();
                        txt3.Text = errorJson;
                    }
                }
            }
        }




        //Getdata

        void Getdata()
        {
            using (SqlDataAdapter da2 = new SqlDataAdapter("SELECT * FROM Surveillant", con2))
            {
                DataSet ds1 = new DataSet();
                da2.Fill(ds1);
                GridView3.DataSource = ds1.Tables[0];
                GridView3.DataBind();
                con2.Close();
            }
        }

        // Edit Rows 

        //This code is used to enable editing of a row in a GridView control. It sets the EditIndex property of the GridView to the index of the row that is being edited. It
        // then calls the GetDataItem() method to retrieve the data for the row and display it in the GridView.
        protected void GridView3_OnRowEditing(object sender, GridViewEditEventArgs e)
        {

            // con.Open();
            GridView3.EditIndex = e.NewEditIndex;
            Getdata();

        }
        //Canceling Edit Rows 

        protected void GridView3_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            GridView3.EditIndex = -1;
            Getdata();

        }

        // update Row


        protected void GridView3_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            if (con2.State == ConnectionState.Closed)
            {
                con2.Open();
            }
            GridViewRow row = GridView3.Rows[e.RowIndex];
            String idd1 = ((TextBox)row.Cells[1].Controls[0]).Text;
            String cin = ((TextBox)row.Cells[2].Controls[0]).Text;
            String firstname2 = ((TextBox)row.Cells[3].Controls[0]).Text;
            String lastname2 = ((TextBox)row.Cells[4].Controls[0]).Text;
            String NumTel2 = ((TextBox)row.Cells[5].Controls[0]).Text;
            String login2 = ((TextBox)row.Cells[6].Controls[0]).Text;
            String Email2 = ((TextBox)row.Cells[7].Controls[0]).Text;
            String mdp2 = ((TextBox)row.Cells[8].Controls[0]).Text;
         //   String etdId = ((TextBox)row.Cells[9].Controls[0]).Text;
            String sexe = ((TextBox)row.Cells[9].Controls[0]).Text;

            cmd2 = new SqlCommand("UPDATE Surveillant SET  NomSurv = @firstname2, PrenomSurv = @lastname2, Cin = @cin,  NumTel = @NumTel2, Login = @login2, EmailSur = @Email2, MDP = @mdp2 ,Sexe = @sexe WHERE IdSurveillant = @idd1", con2)
            {
                CommandType = CommandType.Text
            };
            cmd2.Parameters.AddWithValue("@idd1", idd1);
            cmd2.Parameters.AddWithValue("@firstname2", firstname2);
            cmd2.Parameters.AddWithValue("@lastname2", lastname2);
            cmd2.Parameters.AddWithValue("@cin", cin);
            cmd2.Parameters.AddWithValue("@NumTel2", NumTel2); 
            cmd2.Parameters.AddWithValue("@login2", login2);
            cmd2.Parameters.AddWithValue("@Email2", Email2);
            cmd2.Parameters.AddWithValue("@mdp2", mdp2);
          //cmd2.Parameters.AddWithValue("@etdId", etdId);
            cmd2.Parameters.AddWithValue("@sexe", sexe);
            cmd2.ExecuteNonQuery();
            GridView3.EditIndex = -1;
            Getdata();
            con2.Close();

        }


        protected void GridView3_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            if (con2.State == ConnectionState.Closed)
            {
                con2.Open();
            }
            GridViewRow row = GridView3.Rows[e.RowIndex];
            String idd2 = row.Cells[1].Text;

            cmd2 = new SqlCommand("DELETE FROM Surveillant WHERE  Idsurveillant=" + idd2, con2)
            {
                CommandType = CommandType.Text
            };
            cmd2.ExecuteNonQuery();
            Getdata();
            con2.Close();
        }


        [Obsolete]

        protected void ButtonPdf2_Click(object sender, ImageClickEventArgs e)
        {
            int columnsCount = GridView3.HeaderRow.Cells.Count;

            // Create the PDF Table specifying the number of columns
            PdfPTable pdfTable = new PdfPTable(columnsCount);

            // Loop thru each cell in GrdiView header row
            foreach (TableCell gridViewHeaderCell in GridView3.HeaderRow.Cells)
            {
                // Create the Font Object for PDF document
                Font font = new Font
                {
                    // Set the font color to GridView header row font color
                    Color = new BaseColor(GridView3.HeaderStyle.ForeColor)
                };

                // Create the PDF cell, specifying the text and font
                PdfPCell pdfCell = new PdfPCell(new Phrase(gridViewHeaderCell.Text, font))
                {
                    // Set the PDF cell backgroundcolor to GridView header row BackgroundColor color
                    BackgroundColor = new BaseColor(GridView3.HeaderStyle.BackColor)
                };

                // Add the cell to PDF table
                pdfTable.AddCell(pdfCell);
            }

            // Loop thru each datarow in GrdiView
            foreach (GridViewRow gridViewRow in GridView3.Rows)
            {
                if (gridViewRow.RowType == DataControlRowType.DataRow)
                {
                    // Loop thru each cell in GrdiView data row
                    foreach (TableCell gridViewCell in gridViewRow.Cells)
                    {
                        Font font = new Font
                        {
                            Color = new BaseColor(GridView3.RowStyle.ForeColor)
                        };

                        PdfPCell pdfCell = new PdfPCell(new Phrase(gridViewCell.Text, font))
                        {
                            BackgroundColor = new BaseColor(GridView3.RowStyle.BackColor)
                        };

                        pdfTable.AddCell(pdfCell);
                    }
                }
            }

            // Create the PDF document specifying page size and margins
            Document pdfDocument = new Document(PageSize.A4, 20f, 20f, 20f, 20f);
            // Roate page using Rotate() function, if you want in Landscape
            //pdfDocument.SetPageSize(PageSize.A4.Rotate());

            // Using PageSize.A4_LANDSCAPE may not work as expected
            //  Document pdfDocument = new Document(PageSize.A4_LANDSCAPE, 10f, 10f, 10f, 10f);

            PdfWriter.GetInstance(pdfDocument, Response.OutputStream);

            pdfDocument.Open();
            pdfDocument.Add(pdfTable);
            pdfDocument.Close();

            Response.ContentType = "application/pdf";
            Response.AppendHeader("content-disposition", "attachment;filename=Students.pdf");
            Response.Flush();
            Response.Write(pdfTable);
            Response.End();
        }

        // Exporter excel  

        protected void Buttonxls2_Click(object sender, ImageClickEventArgs e)
        {

            Response.Clear();
            Response.Buffer = true;
            Response.ContentType = "application/ms-excel";
            Response.AddHeader("content-disposition", "attachment;filename=Surveillants.xls");
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            GridView3.RenderControl(htw);
            Response.Output.Write(sw.ToString());
            Response.End();
        }



    }
}
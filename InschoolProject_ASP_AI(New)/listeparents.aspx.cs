using System;
using Newtonsoft.Json.Linq;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Web.UI.WebControls;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using System.Web.UI;
using System.Web;

namespace InschoolProject_ASP_AI_New_
{
    public partial class listegarents : System.Web.UI.Page
    {
       

            //This code creates a new SqlConnection object and assigns it to the con variable. The connection string
            SqlConnection con1 = new SqlConnection(ConfigurationManager.ConnectionStrings["Inschooldb"].ConnectionString);
            SqlDataReader dr1; //objet of dataReader
            SqlCommand cmd1 = new SqlCommand();


            protected void Page_Load(object sender, EventArgs e)   
            {
                // Check if the page is being loaded for the first time
                if (!IsPostBack)
                {
                    // Get the file path of the text file
                    string filePath1 = Server.MapPath("init_gpt_parents.txt");

                    // Check if the session variable has been set
                    if (Session["New_Load"] == null)
                    {
                        // Read the text file
                        string fileContent1 = File.ReadAllText(filePath1);

                        // Set the text of the textbox to the content of the text file
                        txt_message.Text = fileContent1;

                        // Set the session variable
                        Session["New_Load"] = "1";

                    btnPdf1.Visible = false;
                    ImageButton1.Visible = false;
                }
            }
            

        }



            public void btn2_Click(object sender, EventArgs e)
            {
            //  Response.Write("<script>alert('"+Session["New_Load"]+"')</script>");
            //and don't use the function TOP in the end of the query because it causing errors   english words
            //txt_vocal : contient text voice
            getc(txt_message.Text + " always Cast as int The field 'IdEtudiant ' from the Table 'Parent' if he is present in the query.please translate all french words to english words and the last  translate all the alias used in the query to english.And please translate all the alias used in the query to english and don't use the function TOP in the end of the query because it causing errors and please never use an ALIAS for the table 'Parent' and 'Etudiant'. Now please convert this Text to MSSQL query : '" + txt_vocal1.Text + "'");

                //   Session["QueryFinal"] = "" + txt1.Text;
                try
                {
                cmd1.Connection = con1;

                    //Help to make Sql request 
                    //txt1 contient la requete

                    cmd1.CommandText = txt2.Text.Replace("AND CAST(IdEtudiant as int);", "").Replace("AND e.IdEtudiant LIKE '%%'", "");
                con1.Open();
                    DataTable dt1 = new DataTable();
                    //used to execute a database query and retrieve the resulting data as a read-only  
                    dr1 = cmd1.ExecuteReader();
                    // Loads the data from the DataReader into the DataTable.
                    dt1.Load(dr1);
                con1.Close();
                    GridView2.DataSource = dt1;
                    // take data of dt and make in GridView1 and display
                    //This line of code binds the data from the data source to the GridView control. This allows the data to be displayed in the GridView control.
                    GridView2.DataBind();
                    GridView2.AutoGenerateColumns = true;
                    GridView2.AutoGenerateEditButton = true;
                    GridView2.AutoGenerateDeleteButton = true;


                    GridView2.EditIndex = -1;

                    //   Autogenerateeditbutton
                }
                catch
                {
                    //This statement sets the DataSource property of the GridView1 control to null. This means that the GridView1 control will no longer be bound to any data source and will not display any data.
                    GridView2.DataSource = null;
                    GridView2.DataBind();

                    if (GridView2.Rows.Count != 0)
                    {
                        lblerror.Text = GridView2.Rows.Count.ToString();

                    }
                    if (GridView2.Rows.Count == 0)
                    {
                        lblerror.Text = cmd1.CommandText;
                        Console.Write(":::" + GridView2.Rows.Count.ToString());
                    }
                }
            }

            public void getc(string message)
            {
                var apiKey = "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";
                var inputText = message;
                var apiUrl = "https://api.openai.com/v1/engines/text-davinci-003/completions";
                var request = WebRequest.Create(apiUrl);
                request.Method = "POST";
                request.Headers["Authorization"] = "Bearer " + apiKey;
                string requestBody = "{\"prompt\": \"" + inputText + "\",\"max_tokens\": 1500,\"temperature\": 0.5}";
                byte[] requestBodyBytes = Encoding.UTF8.GetBytes(requestBody);
                request.ContentType = "application/json";
                request.ContentLength = requestBodyBytes.Length;
                using (Stream requestStream = request.GetRequestStream())
                {
                    requestStream.Write(requestBodyBytes, 0, requestBodyBytes.Length);
                }
                try
                {
                    using (WebResponse response = request.GetResponse())
                    {
                        using (Stream responseStream = response.GetResponseStream())
                        {
                            using (StreamReader reader = new StreamReader(responseStream))
                            {
                                string responseJson = reader.ReadToEnd();
                                JObject responseData = JObject.Parse(responseJson);
                                string generatedText = (string)responseData["choices"][0]["text"];
                                txt2.Text = generatedText;
                            }
                        }
                    }
                }
                catch (WebException ex)
                {
                    using (Stream responseStream = ex.Response.GetResponseStream())
                    {
                        using (StreamReader reader = new StreamReader(responseStream))
                        {
                            string errorJson = reader.ReadToEnd();
                            txt2.Text = errorJson;
                        }
                    }
                }
            }


            //Getdata

            void Getdata()
            {
                using (SqlDataAdapter da = new SqlDataAdapter("SELECT * FROM Parent", con1))
                {
                    DataSet ds1 = new DataSet();
                    da.Fill(ds1);
                    GridView2.DataSource = ds1.Tables[0];
                    GridView2.DataBind();
                    con1.Close();
                }
            }
            // Edit Rows 

            //This code is used to enable editing of a row in a GridView control. It sets the EditIndex property of the GridView to the index of the row that is being edited. It
            // then calls the GetDataItem() method to retrieve the data for the row and display it in the GridView.
            protected void GridView2_OnRowEditing(object sender, GridViewEditEventArgs e)
            {

                // con.Open();
                GridView2.EditIndex = e.NewEditIndex;
                Getdata();

            }
            //Canceling Edit Rows 

            protected void GridView2_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
            {
                GridView2.EditIndex = -1;
                Getdata();

            }

            // update Row


            protected void GridView2_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
            {
                if (con1.State == ConnectionState.Closed)
                {
                    con1.Open();
                }
             GridViewRow row = GridView2.Rows[e.RowIndex];
             String id1 = ((TextBox)row.Cells[1].Controls[0]).Text;
            String cin = ((TextBox)row.Cells[2].Controls[0]).Text;
            String firstname1 = ((TextBox)row.Cells[3].Controls[0]).Text;     
            String lastname1 = ((TextBox)row.Cells[4].Controls[0]).Text;
            String sexe1 = ((TextBox)row.Cells[5].Controls[0]).Text;
            String NumTel1 = ((TextBox)row.Cells[6].Controls[0]).Text;
            String login1 = ((TextBox)row.Cells[7].Controls[0]).Text;
            String Email1 = ((TextBox)row.Cells[8].Controls[0]).Text;
            String fonc = ((TextBox)row.Cells[9].Controls[0]).Text;
            String adress1 = ((TextBox)row.Cells[10].Controls[0]).Text; 
        //     String idetd1 = ((TextBox)row.Cells[11].Controls[0]).Text;
            String mdp = ((TextBox)row.Cells[11].Controls[0]).Text;

            cmd1 = new SqlCommand("UPDATE Parent SET  Nomparent = @firstname1, Prenomparent = @lastname1, CIN = @cin,  NumTelParent = @NumTel1, Sexe = @sexe1 ,Login = @login1, Email = @Email1, Fonctionnalite = @fonc  ,Address = @adress1 ,Mdp = @mdp WHERE Idparent = @id1", con1)
                {
                    CommandType = CommandType.Text
                };
             cmd1.Parameters.AddWithValue("@id1", id1);
            cmd1.Parameters.AddWithValue("@firstname1", firstname1);
            cmd1.Parameters.AddWithValue("@lastname1", lastname1);
            cmd1.Parameters.AddWithValue("@cin", cin); 
            cmd1.Parameters.AddWithValue("@NumTel1", NumTel1);
            cmd1.Parameters.AddWithValue("@sexe1", sexe1);
            cmd1.Parameters.AddWithValue("@login1", login1);
            cmd1.Parameters.AddWithValue("@Email1", Email1);
             cmd1.Parameters.AddWithValue("@fonc", fonc);
             cmd1.Parameters.AddWithValue("@adress1", adress1);
          //cmd1.Parameters.AddWithValue("@idetd1", idetd1);
            cmd1.Parameters.AddWithValue("@mdp", mdp);


            cmd1.ExecuteNonQuery();
                GridView2.EditIndex = -1;
                Getdata();
                con1.Close();

            }


            protected void GridView2_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
            {
                if (con1.State == ConnectionState.Closed)
                {
                    con1.Open();
                }
                GridViewRow row = GridView2.Rows[e.RowIndex];
                String idd1 = row.Cells[1].Text;

                cmd1 = new SqlCommand("DELETE FROM Parent WHERE  Idparent=" + idd1, con1)
                {
                    CommandType = CommandType.Text
                };
                cmd1.ExecuteNonQuery();
                Getdata();
                con1.Close();
            }

            //Exporter Pdf 



            [Obsolete]

            protected void ButtonPdf1_Click(object sender, ImageClickEventArgs e)
            {
                int columnsCount = GridView2.HeaderRow.Cells.Count;

            // Create the PDF Table specifying the number of columns
            PdfPTable pdfTable = new PdfPTable(columnsCount);

                // Loop thru each cell in GrdiView header row
                foreach (TableCell gridViewHeaderCell in GridView2.HeaderRow.Cells)
                {
                    // Create the Font Object for PDF document
                    Font font = new Font
                    {
                        // Set the font color to GridView header row font color
                        Color = new BaseColor(GridView2.HeaderStyle.ForeColor)
                    };

                    // Create the PDF cell, specifying the text and font
                    PdfPCell pdfCell = new PdfPCell(new Phrase(gridViewHeaderCell.Text, font))
                    {
                        // Set the PDF cell backgroundcolor to GridView header row BackgroundColor color
                        BackgroundColor = new BaseColor(GridView2.HeaderStyle.BackColor)
                    };

                    // Add the cell to PDF table
                    pdfTable.AddCell(pdfCell);
                }

                // Loop thru each datarow in GrdiView
                foreach (GridViewRow gridViewRow in GridView2.Rows)
                {
                    if (gridViewRow.RowType == DataControlRowType.DataRow)
                    {
                        // Loop thru each cell in GrdiView data row
                        foreach (TableCell gridViewCell in gridViewRow.Cells)
                        {
                            Font font = new Font
                            {
                                Color = new BaseColor(GridView2.RowStyle.ForeColor)
                            };

                            PdfPCell pdfCell = new PdfPCell(new Phrase(gridViewCell.Text, font))
                            {
                                BackgroundColor = new BaseColor(GridView2.RowStyle.BackColor)
                            };

                            pdfTable.AddCell(pdfCell);
                        }
                    }
                }

                // Create the PDF document specifying page size and margins
                Document pdfDocument = new Document(PageSize.A4, 20f, 20f, 20f, 20f);
                // Roate page using Rotate() function, if you want in Landscape
                //pdfDocument.SetPageSize(PageSize.A4.Rotate());

                // Using PageSize.A4_LANDSCAPE may not work as expected
                //  Document pdfDocument = new Document(PageSize.A4_LANDSCAPE, 10f, 10f, 10f, 10f);

                PdfWriter.GetInstance(pdfDocument, Response.OutputStream);

                pdfDocument.Open();
                pdfDocument.Add(pdfTable);
                pdfDocument.Close();

                Response.ContentType = "application/pdf";
                Response.AppendHeader("content-disposition", "attachment;filename=Parent.pdf");
                Response.Flush();
                Response.Write(pdfTable);
                Response.End();
            }

        // Exporter excel  

        protected void Buttonxls1_Click(object sender, ImageClickEventArgs e)
        {

            Response.Clear();
            Response.Buffer = true;
            Response.ContentType = "application/ms-excel";
            Response.AddHeader("content-disposition", "attachment;filename=Parents.xls");
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            GridView2.RenderControl(htw);
            Response.Output.Write(sw.ToString());
            Response.End();
        }


        public override void VerifyRenderingInServerForm(Control control)
        {
            //  base.VerifyRenderingInServerForm(control);
        }


    }
    
}
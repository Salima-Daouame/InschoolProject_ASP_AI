
using Newtonsoft.Json.Linq;
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Text;
using System.Web.UI.WebControls;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html.simpleparser;
using System.Web.UI;
using System.Web;

namespace InschoolProject_ASP_AI_New_
{
    public partial class actifs : System.Web.UI.Page
    {

        //This code creates a new SqlConnection object and assigns it to the con variable. The connection string
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["Inschooldb"].ConnectionString);
        SqlDataReader dr; //objet of dataReader
        SqlCommand cmd = new SqlCommand();


        protected void Page_Load(object sender, EventArgs e)
        {
            // Check if the page is being loaded for the first time
            if (!IsPostBack)
            {
                // Get the file path of the text file
                string filePath = Server.MapPath("init_gpt_etudiants.txt");

                // Check if the session variable has been set
                if (Session["New_Load"] == null)
                {
                    // Read the text file
                    string fileContent = File.ReadAllText(filePath);

                    // Set the text of the textbox to the content of the text file
                    txt_message.Text = fileContent;

                    // Set the session variable
                    Session["New_Load"] = "1";

                    btnPdf.Visible = false;
                    ImageButton.Visible = false;
                }
                
            }

        }



        public void btn1_Click(object sender, EventArgs e)
        {
            //  Response.Write("<script>alert('"+Session["New_Load"]+"')</script>");
            //and don't use the function TOP in the end of the query because it causing errors
            //txt_vocal : contient text voice
            getc(txt_message.Text + " always Cast as string The field 'Nom' from the Table 'Etudiant' if he is present in the query. please translate all the alias used in the query to english and don't use the function TOP in the end of the query because it causing errors and please never use an ALIAS for the table 'Etudiant'. Now please convert this Text to MSSQL query : '" + txt_vocal.Text + "'");

            //   Session["QueryFinal"] = "" + txt1.Text;
            try
            {
                cmd.Connection = con;

                //Help to make Sql request 
                //txt1 contient la requete
                //txt_vocal contient le txt de vocale 

                cmd.CommandText = txt1.Text.Replace("AND CAST(Nom as string);", "").Replace("AND e.Nom LIKE '%%'", "");
                con.Open();
                DataTable dt = new DataTable();
                //used to execute a database query and retrieve the resulting data as a read-only  
                dr = cmd.ExecuteReader();
                // Loads the data from the DataReader into the DataTable.
                dt.Load(dr);
                con.Close();
                GridView1.DataSource = dt;
                // take data of dt and make in GridView1 and display
                //This line of code binds the data from the data source to the GridView control. This allows the data to be displayed in the GridView control.
                GridView1.DataBind();
                GridView1.AutoGenerateColumns = true;
                GridView1.AutoGenerateEditButton = true;
                GridView1.AutoGenerateDeleteButton = true;


                GridView1.EditIndex = -1;

                //   Autogenerateeditbutton
            }
            catch
            {
                //This statement sets the DataSource property of the GridView1 control to null. This means that the GridView1 control will no longer be bound to any data source and will not display any data.
                GridView1.DataSource = null;
                GridView1.DataBind();

                if (GridView1.Rows.Count != 0)
                {
                    lblerror.Text = GridView1.Rows.Count.ToString();

                }
                if (GridView1.Rows.Count == 0)
                {
                    lblerror.Text = cmd.CommandText;
                    Console.Write(":::" + GridView1.Rows.Count.ToString());
                }
            }
        }

          private int GetColumnIndexByName(GridViewRow row, string columnName)
             {
                 int index = -1;
                 foreach (DataControlFieldCell cell in row.Cells)
                 {
                     if (cell.ContainingField is BoundField && ((BoundField)cell.ContainingField).DataField.Equals(columnName))
                     {
                         index = row.Cells.GetCellIndex(cell);
                         break;
                     }
                 }
                 return index;
             }
        
        // I have probleme hna : le cas 1 : salima2     ;;; le cas 2  : salima1
        public void getc(string message)
        {
            var apiKey = "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";
            var inputText = message;
            var apiUrl = "https://api.openai.com/v1/engines/text-davinci-003/completions";
            var request = WebRequest.Create(apiUrl);
            request.Method = "POST";
            request.Headers["Authorization"] = "Bearer " + apiKey;
            string requestBody = "{\"prompt\": \"" + inputText + "\",\"max_tokens\": 1500,\"temperature\": 0.5}";
            byte[] requestBodyBytes = Encoding.UTF8.GetBytes(requestBody);
            request.ContentType = "application/json";
            request.ContentLength = requestBodyBytes.Length;
            using (Stream requestStream = request.GetRequestStream())
            {
                requestStream.Write(requestBodyBytes, 0, requestBodyBytes.Length);
            }
            try
            {
                using (WebResponse response = request.GetResponse())
                {
                    using (Stream responseStream = response.GetResponseStream())
                    {
                        using (StreamReader reader = new StreamReader(responseStream))
                        {
                            string responseJson = reader.ReadToEnd();
                            JObject responseData = JObject.Parse(responseJson);
                            string generatedText = (string)responseData["choices"][0]["text"];
                            txt1.Text = generatedText;
                        }
                    }
                }
            }
            catch (WebException ex)
            {
                using (Stream responseStream = ex.Response.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(responseStream))
                    {
                        string errorJson = reader.ReadToEnd();
                        txt1.Text = errorJson;
                    }
                }
            }
        }
        //Getdata




        void Getdata()
        {
            using (SqlDataAdapter da = new SqlDataAdapter("SELECT * FROM Etudiant", con))
            {
                DataSet ds = new DataSet();
                da.Fill(ds);
                GridView1.DataSource = ds.Tables[0];
                GridView1.DataBind();
                con.Close();
            }
        }


        // Edit Rows 

        //This code is used to enable editing of a row in a GridView control. It sets the EditIndex property of the GridView to the index of the row that is being edited. It
        // then calls the GetDataItem() method to retrieve the data for the row and display it in the GridView.
        protected void GridView1_OnRowEditing(object sender, GridViewEditEventArgs e)
        {

            // con.Open();
            GridView1.EditIndex = e.NewEditIndex;
            Getdata();

        }
        //Canceling Edit Rows 

        protected void GridView1_OnRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            GridView1.EditIndex = -1;
            Getdata();

        }

        // update Row
        protected void GridView1_OnRowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            if (con.State == ConnectionState.Closed)
            {
                con.Open();
            }
            GridViewRow row = GridView1.Rows[e.RowIndex];
            String idd = ((TextBox)row.Cells[1].Controls[0]).Text;
            String cne = ((TextBox)row.Cells[2].Controls[0]).Text;
            String firstname = ((TextBox)row.Cells[3].Controls[0]).Text;
            String lastname = ((TextBox)row.Cells[4].Controls[0]).Text;
            String dateNais = ((TextBox)row.Cells[5].Controls[0]).Text;
            String NumTel = ((TextBox)row.Cells[6].Controls[0]).Text;
            String DateInsc = ((TextBox)row.Cells[7].Controls[0]).Text;
            String Email = ((TextBox)row.Cells[8].Controls[0]).Text;
      //      String niveauSc = ((TextBox)row.Cells[9].Controls[0]).Text;
        //    String niveau = ((TextBox)row.Cells[10].Controls[0]).Text;
          //  String branch = ((TextBox)row.Cells[11].Controls[0]).Text;
            String sexe = ((TextBox)row.Cells[12].Controls[0]).Text;
            String adress = ((TextBox)row.Cells[13].Controls[0]).Text;
            String login = ((TextBox)row.Cells[14].Controls[0]).Text;
            String mdp = ((TextBox)row.Cells[15].Controls[0]).Text;
            String etat = ((TextBox)row.Cells[16].Controls[0]).Text;
            String parentid = ((TextBox)row.Cells[17].Controls[0]).Text;
            String survpid = ((TextBox)row.Cells[18].Controls[0]).Text;
            String branchid = ((TextBox)row.Cells[19].Controls[0]).Text;



            cmd = new SqlCommand("UPDATE Etudiant SET CNE = @cne, Nom = @firstname, Prenom = @lastname, DateNaissance = @dateNais, NumTelEtd = @NumTel, DateInscription = @DateInsc, Email = @Email, Sexe = @sexe, Adress = @adress, Login = @login, MDP = @mdp, EtatEtudiant = @etat, IdParent = @cparentid, IdSurveillant = @survpid,  IdBranch= @branchid   WHERE IdEtudiant = @idd", con)
            {
                CommandType = CommandType.Text
            };
            cmd.Parameters.AddWithValue("@idd", idd);
            cmd.Parameters.AddWithValue("@cne", cne);
            cmd.Parameters.AddWithValue("@firstname", firstname);
            cmd.Parameters.AddWithValue("@lastname", lastname);
            cmd.Parameters.AddWithValue("@dateNais", dateNais);
            cmd.Parameters.AddWithValue("@NumTel", NumTel);
            cmd.Parameters.AddWithValue("@DateInsc", DateInsc);
            cmd.Parameters.AddWithValue("@Email", Email);
         //   cmd.Parameters.AddWithValue("@niveauSc", niveauSc);
           // cmd.Parameters.AddWithValue("@niveau", niveau);
            //cmd.Parameters.AddWithValue("@branch", branch);
            cmd.Parameters.AddWithValue("@sexe", sexe);
            cmd.Parameters.AddWithValue("@adress", adress);
            cmd.Parameters.AddWithValue("@login", login);
            cmd.Parameters.AddWithValue("@mdp", mdp);
            cmd.Parameters.AddWithValue("@etat", etat);
            cmd.Parameters.AddWithValue("@parentid", parentid);
            cmd.Parameters.AddWithValue("@survpid", survpid);
            cmd.Parameters.AddWithValue("@branchid", branchid);
            // cmd.Parameters.AddWithValue("@cycleid", cycleid);
            cmd.ExecuteNonQuery();
            GridView1.EditIndex = -1;
            Getdata();
            con.Close();

        }


        protected void GridView1_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            if (con.State == ConnectionState.Closed)
            {
                con.Open();
            }
            GridViewRow row = GridView1.Rows[e.RowIndex];
            String idd = row.Cells[1].Text;

            cmd = new SqlCommand("DELETE FROM Etudiant WHERE  IdEtudiant=" + idd, con)
            {
                CommandType = CommandType.Text
            };
            cmd.ExecuteNonQuery();
            Getdata();
            con.Close();
        }

        //Exporter Pdf 



        [Obsolete]

        protected void ButtonPdf_Click(object sender, ImageClickEventArgs e)
        {
            int columnsCount = GridView1.HeaderRow.Cells.Count;

            // Create the PDF Table specifying the number of columns
            PdfPTable pdfTable = new PdfPTable(columnsCount);

            // Loop thru each cell in GrdiView header row
            foreach (TableCell gridViewHeaderCell in GridView1.HeaderRow.Cells)
            {
                // Create the Font Object for PDF document
                Font font = new Font
                {
                    // Set the font color to GridView header row font color
                    Color = new BaseColor(GridView1.HeaderStyle.ForeColor)
                };

                // Create the PDF cell, specifying the text and font
                PdfPCell pdfCell = new PdfPCell(new Phrase(gridViewHeaderCell.Text, font))
                {
                    // Set the PDF cell backgroundcolor to GridView header row BackgroundColor color
                    BackgroundColor = new BaseColor(GridView1.HeaderStyle.BackColor)
                };

                // Add the cell to PDF table
                pdfTable.AddCell(pdfCell);
            }

            // Loop thru each datarow in GrdiView
            foreach (GridViewRow gridViewRow in GridView1.Rows)
            {
                if (gridViewRow.RowType == DataControlRowType.DataRow)
                {
                    // Loop thru each cell in GrdiView data row
                    foreach (TableCell gridViewCell in gridViewRow.Cells)
                    {
                        Font font = new Font
                        {
                            Color = new BaseColor(GridView1.RowStyle.ForeColor)
                        };

                        PdfPCell pdfCell = new PdfPCell(new Phrase(gridViewCell.Text, font))
                        {
                            BackgroundColor = new BaseColor(GridView1.RowStyle.BackColor)
                        };

                        pdfTable.AddCell(pdfCell);
                    }
                }
            }

            // Create the PDF document specifying page size and margins
            Document pdfDocument = new Document(PageSize.A4, 20f, 20f, 20f, 20f);
            // Roate page using Rotate() function, if you want in Landscape
            //pdfDocument.SetPageSize(PageSize.A4.Rotate());

            // Using PageSize.A4_LANDSCAPE may not work as expected
            //  Document pdfDocument = new Document(PageSize.A4_LANDSCAPE, 10f, 10f, 10f, 10f);

            PdfWriter.GetInstance(pdfDocument, Response.OutputStream);

            pdfDocument.Open();
            pdfDocument.Add(pdfTable);
            pdfDocument.Close();

            Response.ContentType = "application/pdf";
            Response.AppendHeader("content-disposition", "attachment;filename=Students.pdf");
            Response.Flush();
            Response.Write(pdfTable);
            Response.End();
        }
 

        // Exporter excel  

        protected void Buttonxls_Click(object sender, ImageClickEventArgs e)
        {
            GridView1.AutoGenerateColumns = false;
            GridView1.AutoGenerateDeleteButton = false;
            Response.Clear();
            Response.Buffer = true;
            Response.ContentType = "application/ms-excel";
            Response.AddHeader("content-disposition", "attachment;filename=Students.xls");
            Response.Charset = "";
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            GridView1.RenderControl(htw);
            Response.Output.Write(sw.ToString());
            Response.End();
        }


        public override void VerifyRenderingInServerForm(Control control)
        {
            //  base.VerifyRenderingInServerForm(control);
        }



    }

}














